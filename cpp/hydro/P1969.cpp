/*
#P1969. [NOIP2013 提高组] 积木大赛

题目描述
春春幼儿园举办了一年一度的“积木大赛”。今年比赛的内容是搭建一座宽度为n的大厦，大厦可以看成由n块宽度为1的积木组成，第i块积木的最终高度需要是hi。
在搭建开始之前，没有任何积木（可以看成n块高度为0的积木）。接下来每次操作，小朋友们可以选择一段连续区间[l,r]，然后将第L块到第R块之间（含第L块和第R块）所有积木的高度分别增加1。
小M是个聪明的小朋友，她很快想出了建造大厦的最佳策略，使得建造所需的操作次数最少。但她不是一个勤于动手的孩子，所以想请你帮忙实现这个策略，并求出最少的操作次数。

输入格式
包含两行，第一行包含一个整数 n，表示大厦的宽度。
第二行包含 n 个整数，第 i 个整数为 hi。
​
输出格式
建造所需的最少操作数。

差分限制了我的想象
*/

#include <iostream>
using namespace std;

int main()
{
    int n, current, temp, sum; // 数列长度 上位 本位 和
    cin >> n;
    cin >> current;
    sum = current;
    for (int i = 1; i < n; i++)
    {
        cin >> temp;
        if (temp > current) // 若本位大于上位，就说明我还需要在多一次的操作来在搭建一层。若本位小于上位，则不需要操作，因为已经在之前搭建过了
            sum += temp - current;
        current = temp; // 更新上位
    }
    cout << sum;
}