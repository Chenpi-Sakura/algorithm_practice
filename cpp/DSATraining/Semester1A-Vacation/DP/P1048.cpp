/*
题目描述
辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”

如果你是辰辰，你能完成这个任务吗？

输入格式
第一行有 2 个整数 T (1≤T≤1000）和 M（1≤M≤100），用一个空格隔开，T 代表总共能够用来采药的时间，M 代表山洞里的草药的数目。
接下来的 M 行每行包括两个在 1 到 100 之间（包括 1 和 100）的整数，分别表示采摘某株草药的时间和这株草药的价值。

输出格式
输出在规定的时间内可以采到的草药的最大总价值。
*/

/*
    01背包
*/

#include<bits/stdc++.h> 
using namespace std;

int f[105][1005];
int dp[105]; // 使用一维数组进行状态压缩
int c[105], w[105];
int t, m;

int main( )
{
    cin >> t >> m;
    for (int i = 1; i <= m; i++) cin >> c[i] >> w[i];
    for (int i = 1; i <= m; i++) // 物品 i
    {
        for (int j = 1; j <= t; j++) // 时间 j
        {
            if (j < c[i]) f[i][j] = f[i - 1][j];
            else f[i][j] = max(f[i - 1][j], f[i - 1][j - c[i]] + w[i]);
        }
    }

    for (int i = 1; i <= m; i++) // 物品 i
    {
        for (int j = t; j >= 1; j--) // 时间 j
        {
            if (j < c[i]) dp[j] = dp[j];
            else dp[j] = max(dp[j], dp[j - c[i]] + w[i]); // 使用逆序更新，是为了防止出现多次选择同一件物品而导致转变为完全背包问题
        }
    }
    
    cout << f[m][t] << endl;
    return 0;
}